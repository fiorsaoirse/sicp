#lang sicp

(#%require rackunit)

(define (A x y)
    (cond 
        ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))
    )
)

(A 1 10) ; 1024 - т.к. базовый случай здесь - y равен 2, будет погружение с y равен 9 и финальное умножение на 2, когда x равен 0

(A 2 4) ; 2 ^ (2 ^ (2 ^ 2)) = 2 ^ (2 ^ 4) = 2 ^ 16

(A 3 3) ; тоже, как 2^16


(define (F f n) (A 0 n)) ; вычисляет 2 * n
(define (G g n) (A 1 n)) ; вычисляет 2 ^ n
(define (H h n) (A 2 n)) ; вычисляет - 2 ^ (2 ^ (2 ^ 2 .... n раз), см. выше

(check-equal? (F 3 5) 10)
(check-equal? (F 1 11) 22)
(check-equal? (F -2 6) 12)

(check-equal? (G 1 3) 8)
(check-equal? (G 20 4) 16)
(check-equal? (G 11 8) 256)


(check-equal? (H 2 2) 4); 2 ^ 2
; (check-equal? (H 2 5) ...) = 2 ^ (2 ^ (2 ^ (2 ^ 2))) = 2 ^ (2 ^ (2 ^ 4)) = 2 ^ (2 ^ 16) = 2 ^ 65 536 = очень много :D